/* $Header$ */
/***************************************************************/
/* Filename		:jpnhg3PymtEnq_DB.pc		                   */
/* Author		:Srinivasa Reddy   					           */
/* Description	:This file has all database functions          */
/*				 required for the service JPNHG3_PYMT_ENQ      */
/***************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sqlca.h>

#define LOG_DEFINED
//#include "field_id.h"
#include "gscbdef.h"
#include "gscbio.h"
#include "gscblog.h"
#include "gscblookupdef.h"

#include "kPPdef.h"
#include "KPPStruct.h"
#include "kPPproto.h"
#include "userlog.h"

#include "jpnhg3_pymt_enq_io.h"
#include "jpnhg3_pymt_enq.h"


APPL_EXCEP_LOG_T excep_log = { {""},{""},{""},{""},{""},{""}, 0,{""}} ;
PROG_ACCESS_LOG_T prog_log = { {""},{""},{""},{""},{""},{""},{""},{""} };
TXN_LOG_T tran_log;
READ_REG_GENERIC_T gen_reg;

//extern userlog(const char *, ...);


char sqlmsg[SQL_MSG_SIZE] = {"\0"};



int Jpnhg3_Pymt_Enq(JPNHG3_PYMT_ENQ_REQ_T *pReq, 
					JPNHG3_PYMT_ENQ_RESP_T **pResp, long *pRespSize,void * ctx)
{
	
	JPNHG3_PYMT_ENQ_REQ_T *req;
	JPNHG3_PYMT_ENQ_RESP_T *resp;//,*new_resp,*orig_resp;
	JPNHG3_USK_ENQ_RESP_T *usk_resp; //added by samsuri on 20 feb 2023
		
	char curr_date_time[DATE_TIME_SIZE];
	int ret_val = 0;
	char program_id[PROG_ID_SIZE];
	long resp_len,resp_len_usk = 0;

	
	//added by samsuri on 21 mar 2023
	struct sqlca sqlca = {0}; 
	EXEC SQL BEGIN DECLARE SECTION;

	varchar kptno[KPT_SIZE] = {0};
	int usk_count = 0;
	varchar applid[APP_ID_SIZE] = {0};
	char genkpt = 0;

	sql_context pcCtx; 
	EXEC SQL END DECLARE SECTION;	
	pcCtx = ctx; // Modification for IJPN
	EXEC SQL CONTEXT USE :pcCtx;// Modification for IJPN



	memset(&prog_log, 0, PROG_LOG_SIZE);
	memset(&excep_log, 0, APPL_EXCEP_LOG_SIZE);
		
	/* Initialize the variables used for logging	*/
	/* Get current date-time for logging			*/
	strcpy(curr_date_time, get_date_time());

	/* Assign request buffer	*/
	req = (JPNHG3_PYMT_ENQ_REQ_T *) pReq;


	userlog("JPNHG3_PYMT_ENQ L1: Initiated");
	
	/* Program access log variable */
	itoa(JPNHG3_PYMT_ENQ_ID, program_id, 10);
	strcpy(prog_log.program_id, program_id);
	strcpy(prog_log.user_id, req->header.user_id);
	strcpy(prog_log.workstation_id, req->header.workstation_id);
	strcpy(prog_log.branch_code, req->header.branch_code);
	strcpy(prog_log.access_start_time, curr_date_time);
	strcpy(prog_log.remarks, "");
	strcpy(prog_log.application_id, req->header.application_id);
	
	/* Application exception log variable */
	strcpy(excep_log.program_id, program_id);
	strcpy(excep_log.user_id, req->header.user_id); 	
	strcpy(excep_log.workstation_id, req->header.workstation_id);
	strcpy(excep_log.branch_code, req->header.branch_code);
	strcpy(excep_log.error_date, curr_date_time);
	strcpy(excep_log.error_msg, "");
	strcpy(excep_log.application_id, req->header.application_id); 	
	excep_log.severity = '\0';	
	excep_log.termination_flag = 'Y';	

	strcpy(prog_log.remarks,"JPNHG3_PYMT_ENQ: Initiated");
	
	userlog("JPNHG3_PYMT_ENQ L1: debug 2");

	resp_len = sizeof(JPNHG3_PYMT_ENQ_RESP_T);	
	resp_len_usk= sizeof(JPNHG3_USK_ENQ_RESP_T);	

	/* Allocate response buffer	*/
	if(NULL == (resp = (JPNHG3_PYMT_ENQ_RESP_T *) malloc(resp_len)))
	{
		strcpy(prog_log.remarks,"JPNHG3_PYMT_ENQ_RESP : Memory allocation for response buffer failed");
		sprintf(excep_log.error_msg,"JPNHG3_PYMT_ENQ_RESP : ");
		excep_log.termination_flag = 'Y';
		excep_log.severity = FATAL;
		log_error(ctx);

		//tpreturn(TPFAIL, RESP_BUF_ERR, (char *) NULL, 0, 0);
		return RESP_BUF_ERR;
	}
	
	memset(resp, '\0', resp_len);

	userlog("JPNHG3_PYMT_ENQ L1: debug 3");

	#ifdef DEBUG
			userlog("JPNHG3_PYMT_ENQ L1 : req->header.application_id:%s:",req->header.application_id);
			userlog("JPNHG3_PYMT_ENQ L1 : req->header.branch_code:%s:", req->header.branch_code);
			userlog("JPNHG3_PYMT_ENQ L1 : req->header.service_id:%d:", req->header.service_id);
			userlog("JPNHG3_PYMT_ENQ L1 : req->header.user_id:%s:", req->header.user_id);
			userlog("JPNHG3_PYMT_ENQ L1 : req->header.workstation_id:%s:", req->header.workstation_id);
			//userlog("JPNHG3_PYMT_ENQ L1 : req->kptno_req_cnt:%d:",req->kptno_req_cnt);			
	#endif

	resp->header = req->header;
			
	if((ret_val = check_header(req->header,ctx)) != SUCCESS)
	{
	#ifdef DEBUG
			userlog("JPNHG3_PYMT_ENQ L1 : check header failed");
	#endif
		strcpy(prog_log.remarks,"JPNHG3_PYMT_ENQ : check header failed");
		excep_log.termination_flag = 'Y';
		excep_log.severity = FATAL;
		log_error(ctx);

		//tpreturn(TPSUCCESS, ret_val, (char *) resp, resp_len, 0);
			*pRespSize = resp_len;
				//memcpy(*pResp, resp, resp_len);
			*pResp = resp;
				return ret_val;
	}
	
	userlog("JPNHG3_PYMT_ENQ L1 :check header Successful");
	
	strcpy((char*)kptno.arr,req->kptno);
	setlen(kptno);

		applid.arr[0] = '\0';
		EXEC SQL SELECT MAX(APPLID) INTO :applid FROM APPLICATION 
			WHERE KPTNO = :kptno 
				AND APPLSTAT IN ('X','Q','A','9','D'); //samsuri added 'A','9','D'

		userlog("JPNHG3_PYMT_ENQ L1  : SELECT MAX(APPLID) INTO :applid FROM APPLICATION SQLCODE: %d",SQLCODE);

		applid.arr[applid.len] = '\0';	

		//added by samsuri on 20 feb 2023
		EXEC SQL 
			SELECT COUNT(APPLID) INTO :usk_count 
			FROM USK_COMPOUND_FEE 
			WHERE OLDAPPLID = :applid;

		userlog("JPNHG3_PYMT_ENQ L1  : SELECT COUNT(APPLID) INTO :usk_count SQLCODE: %d",SQLCODE);
		
		EXEC SQL SELECT GENKPT INTO :genkpt FROM PROBL_RECORD 
		WHERE APPLID = :applid
		AND PROBLREASONCODE='E0001'; 

		userlog("JPNHG3_PYMT_ENQ L1  : SELECT GENKPT SQLCODE: %d",SQLCODE);

		//added by samsuri on 21 feb 2023
		if(usk_count > 0)// && genkpt == 'U')
		{
			userlog("JPNHG3_PYMT_ENQ L1 :  usk_count : %d",usk_count);
			resp_len = resp_len + (resp_len_usk*usk_count);

			resp = (JPNHG3_PYMT_ENQ_RESP_T *) malloc( resp_len);
			if (resp == NULL)
			{
				strcpy(prog_log.remarks,"JPNHG3_PYMT_ENQ_RESP : Memory allocation for response buffer failed");
				sprintf(excep_log.error_msg,"JPNHG3_PYMT_ENQ_RESP : ");
				excep_log.termination_flag = 'Y';
				excep_log.severity = FATAL;
				log_error(ctx);

				//tpreturn(TPFAIL, RESP_BUF_ERR, (char *) NULL, 0, 0);
				return RESP_BUF_ERR;
			}		

			memset(resp, '\0', resp_len);	

			resp->header = req->header;
		}	
		
		// usk_resp = (JPNHG3_USK_ENQ_RESP_T *)(resp + 1);	

		/* enquiry processing function */		
		ret_val = enq_processing(req,resp,ctx);
		if(ret_val != SUCCESS)
		{
		#ifdef DEBUG
			userlog("JPNHG3_PYMT_ENQ L1 :enq_processing function failed");
		#endif
		strcpy(prog_log.remarks,"JPNHG3_PYMT_ENQ : enq_processing function failed");
		strcpy(excep_log.error_msg,"JPNHG3_PYMT_ENQ : enq_processing function failed");
		excep_log.termination_flag = 'Y';
		excep_log.severity = FATAL;
		log_error(ctx);

		//tpreturn(TPSUCCESS, ret_val, (char *) resp, resp_len, 0);
		*pRespSize = resp_len;
		//memcpy(*pResp, resp, resp_len);
			*pResp = resp;
		return ret_val;
		}
			
		resp->usk_count = usk_count;

		if(usk_count > 0)//  && genkpt == 'U')
		{
			usk_resp = (JPNHG3_USK_ENQ_RESP_T *)(resp + 1);	

			ret_val = usk_processing(req,usk_resp,ctx);
			if(ret_val != SUCCESS)
			{
			#ifdef DEBUG
				userlog("JPNHG3_PYMT_ENQ L1 :usk_processing function failed");
			#endif
			strcpy(prog_log.remarks,"JPNHG3_PYMT_ENQ : usk_processing function failed");
			strcpy(excep_log.error_msg,"JPNHG3_PYMT_ENQ : usk_processing function failed");
			excep_log.termination_flag = 'Y';
			excep_log.severity = FATAL;
			log_error(ctx);

			//tpreturn(TPSUCCESS, ret_val, (char *) resp, resp_len, 0);
			*pRespSize = resp_len;
			//memcpy(*pResp, resp, resp_len);
				*pResp = resp;
			return ret_val;
			}

			userlog(" ");
			userlog("USK Response buffer values ");
			userlog("JPNHG3_PYMT_ENQ L1 :  usk_resp->uskApplid : %s",usk_resp->uskApplid);
			userlog("JPNHG3_PYMT_ENQ L1 :  usk_resp->uskOldApplid : %s",usk_resp->uskOldApplid);
			userlog("JPNHG3_PYMT_ENQ L1 :  usk_resp->txnSerNo : %d",usk_resp->txnSerNo);

		}
		
		userlog(" ");
		userlog("Response buffer values ");
		userlog("JPNHG3_PYMT_ENQ L1 :  resp->applid : %s",resp->applid);
		userlog("JPNHG3_PYMT_ENQ L1 :  resp->oldapplid : %s",resp->oldapplid);
		userlog("JPNHG3_PYMT_ENQ L1 :  resp->collcenter : %s",resp->collcenter);
		userlog("JPNHG3_PYMT_ENQ L1 :  resp->origamt : %.2f",resp->origamt);
		userlog("JPNHG3_PYMT_ENQ L1 :  resp->agencyrevncode : %d",resp->agencyrevncode);
		userlog("JPNHG3_PYMT_ENQ L1 :  resp->name : %s",resp->name);
		userlog("JPNHG3_PYMT_ENQ L1 :  resp->address1 : %s",resp->address1);
		userlog("JPNHG3_PYMT_ENQ L1 :  resp->address2 : %s",resp->address2);
		userlog("JPNHG3_PYMT_ENQ L1 :  resp->address3 : %s",resp->address3);
		userlog("JPNHG3_PYMT_ENQ L1 :  resp->postcode : %s",resp->postcode);
		userlog("JPNHG3_PYMT_ENQ L1 :  resp->statecode : %s",resp->statecode);
		userlog("JPNHG3_PYMT_ENQ L1 :  resp->citycode : %d",resp->citycode);

		userlog(" ");
		userlog("JPNHG3_PYMT_ENQ L1 :Service Completed");
		userlog(" ");


		userlog("JPNHG3_PYMT_ENQ L1 :  resp_len : %d",resp_len);

		*pRespSize = resp_len;	
		*pResp = resp;
		 return GMPC_GOOD;
}



/*************************************************************************/
/* Function Name:enq_processing								             */
/* Description  :Updates the address info to the tables based on applid  */	
/* Input        :ADDRESS_INFO_T structure					             */   
/* Return Values:SUCCESS, SELECT_ERROR or UPDATE_ERROR       	         */
/*************************************************************************/
int enq_processing(JPNHG3_PYMT_ENQ_REQ_T *req, JPNHG3_PYMT_ENQ_RESP_T *resp, void * ctx)
{
	struct sqlca sqlca = {0}; // added on 13/03/06
	EXEC SQL BEGIN DECLARE SECTION;

	varchar applid[APP_ID_SIZE] = {0};
	varchar kptno[KPT_SIZE] = {0};
	int OutStandtxnSerNo = 0; //added by samsuri on 21 mar 2023
	float   feeamt=0;
	//varchar arcode[AG_REV_CODE_SIZE] = {0};
	int     arcode=0;
	varchar ccenter[BRANCH_CODE_SIZE] = {0};
	varchar name[80+1] = {0};
	varchar address1[ADDRESS1_SIZE] = {0};
	varchar address2[ADDRESS1_SIZE] = {0};
	varchar address3[ADDRESS1_SIZE] = {0};
	varchar postcode[POSTCODE_SIZE] = {0};
	varchar statecode[STATECODE_SIZE] = {0};
	int  citycode;	
	char genkpt = 0;
	
	int   ret_code=0;

	//added by samsuri - problem records
	int  prob_no= 0;
	varchar id_type[ID_TYPE_SIZE] = {0}; 
	varchar id_no[ID_SIZE] = {0}; 
	varchar prob_date[DATE_TIME_SIZE + 4] = {0}; 
	varchar reason_code[REASON_CODE_SIZE] = {0}; 
	int  reason_srno = 0;
	char prob_stat = 0;
	varchar prob_remarks[PROB_REMARK_SIZE] = {0}; 
	varchar prob_solve_date[DATE_TIME_SIZE + 4] = {0}; 
	varchar user_id[USER_ID_SIZE] = {0}; 
	varchar workstation_id[WS_ID_SIZE] = {0}; 
	varchar action_date[DATE_TIME_SIZE + 4] = {0}; 
	varchar action_remarks[PROB_REMARK_SIZE] = {0}; 
	varchar action_user_id[USER_ID_SIZE] = {0}; 
	varchar branch_code[BRANCH_CODE_SIZE] = {0}; 
	varchar txn_code[TRANSACTION_CODE_SIZE] = {0}; 
	varchar legacy_type[4] = {0}; 	
	char gscbupdflag = 0;	
	char enqFlag = 0;
	//char genkpt;
	char bskrecd = 0;	
	varchar gUser1[9] = {0}; 
	varchar gUser1TimeStamp[DATE_TIME_SIZE + 4] = {0}; 
	varchar gUser2[9] = {0}; 	
	varchar gUser2TimeStamp[DATE_TIME_SIZE + 4] = {0}; 

	sql_context pcCtx; 
	EXEC SQL END DECLARE SECTION;


	pcCtx = ctx; 
	EXEC SQL CONTEXT USE :pcCtx;


	// copy the kptno from req buffer to local variable here
	strcpy((char*)kptno.arr,req->kptno);
	setlen(kptno);

	#ifdef DEBUG
		userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : req->kptno: %s",req->kptno);
		userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : kptno: %s",kptno.arr);
	#endif


	applid.arr[0] = '\0';
	EXEC SQL SELECT MAX(APPLID) INTO :applid FROM APPLICATION 
		WHERE KPTNO = :kptno 
			AND APPLSTAT IN ('X','Q','A','9','D'); //samsuri added 'A','9','D'

	applid.arr[applid.len] = '\0';	

	sqlmsg[0] = '\0';
	strcpy(sqlmsg, SQLMSG);
	if(sqlca.sqlcode != 0)
	{
		#ifdef DEBUG
			userlog("JPNHG3_PYMT_ENQ L1  : enq_processing() failed while select max(applid) from APPLICATION");
		#endif
		strcpy(prog_log.remarks,"enq_processing() failed while select max(applid) from APPLICATION");
		sprintf(excep_log.error_msg,"enq_processing() failed while select max(applid) from APPLICATION:%s ",sqlmsg);
		excep_log.termination_flag = 'Y';
		excep_log.severity = FATAL;
		log_error(ctx);

		return SELECT_ERROR;
	}

	#ifdef DEBUG
		userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : max applid after select: %s",applid.arr);		
	#endif


	if(applid.arr[0] == '\0')
	{
		#ifdef DEBUG
			userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : No record found for HG3 payment");		
		#endif

		ret_code = 70001;
		return ret_code;  // no record found for HG3 payment	

	}
	else
	{
		// EXEC SQL SELECT GENKPT INTO :genkpt FROM PROBL_RECORD
		// 	WHERE APPLID = :applid
		// 		//AND PROBLREASONCODE = 'Q0001'; //samsuri remark this
		// 		AND PROBLREASONCODE = 'E0001'; //samsuri todo: change to E0001

		EXEC SQL SELECT PROBLNO,IDTYPE,IDNO,TO_CHAR(PROBLDATE,'DDMMYYYY HH24MISS'),PROBLREASONCODE,PROBLSERNO,
		PROBLSTAT,PROBLREMARKS,
		TO_CHAR(PROBLSOLVEDATE,'DDMMYYYY HH24MISS'),USERID,WSID,TO_CHAR(ACTDATETIME,'DDMMYYYY HH24MISS'),ACTREMARKS,
		ACTUSERID,BRANCHCODE,TXNCODE,LEGACYTYPE,
		GSCBUPDFLAG,ENQFLAG,GENKPT,BSKRECD,GUSER1,TO_CHAR(GUSER1TIMESTAMP,'DDMMYYYY HH24MISS'),GUSER2,
		TO_CHAR(GUSER2TIMESTAMP,'DDMMYYYY HH24MISS') 
		INTO :prob_no,:id_type,:id_no,:prob_date,:reason_code,:reason_srno,:prob_stat,
		:prob_remarks,:prob_solve_date,:user_id,:workstation_id,:action_date,
		:action_remarks,:action_user_id,:branch_code,:txn_code,:legacy_type,
		:gscbupdflag,:enqFlag,:genkpt,:bskrecd,:gUser1,:gUser1TimeStamp,:gUser2,:gUser2TimeStamp
		FROM PROBL_RECORD
			WHERE APPLID = :applid
				AND PROBLREASONCODE = 'E0001';

		sqlmsg[0] = '\0';
		strcpy(sqlmsg, SQLMSG);
		if(sqlca.sqlcode != 0)
		{
			#ifdef DEBUG
				userlog("JPNHG3_PYMT_ENQ L1  : enq_processing() failed while select genkpt from PROBL_RECORD. sqlmsg:%s ",sqlmsg);
			#endif

			ret_code = 70001;
			return ret_code;  // no record found for HG3 payment	

			//samsuri remark below code, use above return value
			// strcpy(prog_log.remarks,"enq_processing() failed while select genkpt from PROBL_RECORD");
			// sprintf(excep_log.error_msg,"enq_processing() failed while select genkpt from PROBL_RECORD:%s ",sqlmsg);
			// excep_log.termination_flag = 'Y';
			// excep_log.severity = FATAL;
			// log_error(ctx);

			//return SELECT_ERROR;
		}

		#ifdef DEBUG
			userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : after select from PROBL_RECORD genkpt: %c",genkpt);
		#endif

		//ADDED by samsuri on 27 oct 2022		
		userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : prob_remarks: %s",prob_remarks.arr);
		userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : user_id: %s",user_id.arr);

		resp->prob_no = prob_no;
		strcpy(resp->id_type,(char*)id_type.arr);
		strcpy(resp->id_no,(char*)id_no.arr);
		strcpy(resp->prob_date,(char*)prob_date.arr);
		strcpy(resp->reason_code,(char*)reason_code.arr);
		resp->reason_srno = reason_srno;
		resp->prob_stat =prob_stat;
		strcpy(resp->prob_remarks,(char*)prob_remarks.arr);
		strcpy(resp->prob_solve_date,(char*)prob_solve_date.arr);
		strcpy(resp->user_id,(char*)user_id.arr);
		strcpy(resp->workstation_id,(char*)workstation_id.arr);
		strcpy(resp->action_date,(char*)action_date.arr);
		strcpy(resp->action_remarks,(char*)action_remarks.arr);
		strcpy(resp->action_user_id,(char*)action_user_id.arr);
		strcpy(resp->branch_code,(char*)branch_code.arr);
		strcpy(resp->txn_code,(char*)txn_code.arr);
		strcpy(resp->legacy_type,(char*)legacy_type.arr);
		resp->gscbupdflag = gscbupdflag;
		resp->enqFlag = enqFlag;
		resp->genkpt = genkpt;
		resp->bskrecd = bskrecd;
		strcpy(resp->gUser1,(char*)gUser1.arr);
		strcpy(resp->gUser1TimeStamp,(char*)gUser1TimeStamp.arr);
		strcpy(resp->gUser2,(char*)gUser2.arr);
		strcpy(resp->gUser2TimeStamp,(char*)gUser2TimeStamp.arr);

		//samsuri move here
		strcpy(resp->applid,req->applid);
		strcpy(resp->oldapplid,(char*)applid.arr);

		userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : resp->id_type: %s",resp->id_type);
		userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : resp->enqFlag: %c",resp->enqFlag);
		userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : resp->genkpt: %c",resp->genkpt);
		userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : resp->gscbupdflag: %c",resp->gscbupdflag);
		userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : resp->bskrecd: %c",resp->bskrecd);
		userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : resp->gUser1: %s",resp->gUser1);
		userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : resp->gUser1TimeStamp: %s",resp->gUser1TimeStamp);
		userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : resp->gUser2: %s",resp->gUser2);
		userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : resp->gUser2TimeStamp: %s",resp->gUser2TimeStamp);


		if(genkpt == '0')
		{
			// no record found
			#ifdef DEBUG
				userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : No record found for genkpt == 0 condition");		
			#endif

			ret_code = 70001;
			return ret_code;  

		}
		//SAMSURI REMARKS THIS TO ALLOW BRANCH TO GET PAYMENT DETAILS
		// else if(genkpt == 'P')
		// { 
		// 	// applicant has paid already
		// 	#ifdef DEBUG
		// 		userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : applicant has paid already for genkpt == P condition");		
		// 	#endif
		// 	ret_code = 70001;
		// 	return ret_code;

		// }
		else if(genkpt == 'U') 
		{
			// unpaid applicant
			#ifdef DEBUG
				userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : unpaid applicant for genkpt == U condition");		
			#endif
			arcode = 0; feeamt = 0; OutStandtxnSerNo = 0;
			EXEC SQL SELECT TXNSERNO, FEEAMT,AGENCYREVNCODE INTO :OutStandtxnSerNo, :feeamt,:arcode
				FROM OUTSTAND_TXN_FEE
					WHERE APPLID = :applid
					AND FEETYPE = 'CF'
					AND TXNSERNO = (
						SELECT TXNSERNO FROM APPL_TXN 
						WHERE APPLID = :applid
						AND TXNCODE = '403');

			//arcode.arr[arcode.len] = '\0';

			sqlmsg[0] = '\0';
			strcpy(sqlmsg, SQLMSG);
			if(sqlca.sqlcode != 0)
			{
				#ifdef DEBUG
					userlog("JPNHG3_PYMT_ENQ L1  : enq_processing() failed while select feeamt from OUTSTAND_TXN_FEE. applid: %s",applid.arr);
				#endif
				strcpy(prog_log.remarks,"enq_processing() failed while select feeamt from OUTSTAND_TXN_FEE");
				sprintf(excep_log.error_msg,"enq_processing() failed while select feeamt from OUTSTAND_TXN_FEE:%s ",sqlmsg);
				excep_log.termination_flag = 'Y';
				excep_log.severity = FATAL;
				log_error(ctx);

				return SELECT_ERROR;
			}

			#ifdef DEBUG
				userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : after select from OUTSTAND_TXN_FEE OutStandTxnSerNo: %d",OutStandtxnSerNo);		
				userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : after select from OUTSTAND_TXN_FEE feeamt: %.2f",feeamt);		
				userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : after select from OUTSTAND_TXN_FEE agencyrevncode: %d",arcode);		
			#endif

			if(arcode > 0)
			{

				// copy these values into response buffer
				// strcpy(resp->applid,req->applid); //samsuri move above
				// strcpy(resp->oldapplid,(char*)applid.arr);

				resp->origamt = feeamt;
				//strcpy(resp->agencyrevncode,(char*)arcode.arr);
				resp->agencyrevncode = arcode;
				resp->OutStandTxnSerNo = OutStandtxnSerNo;


			}
			else
			{
				ret_code = 70001;
				return ret_code;
			}

			ret_code = 0;
			//return ret_code;
		}
		else
		{
			#ifdef DEBUG
				userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : In the else part for genkpt not P, not U  condition : %c",genkpt);		
			#endif
			ret_code = 0;//samsuri change from 70001 to 0
			//return ret_code;
		}

		//samsuri move it here
		ccenter.arr[0] = '\0';
		EXEC SQL SELECT COLLCENTER INTO :ccenter FROM APPLICATION
			WHERE APPLID = :applid;

		ccenter.arr[ccenter.len] = '\0';

		sqlmsg[0] = '\0';
		strcpy(sqlmsg, SQLMSG);
		if(sqlca.sqlcode != 0)
		{
			#ifdef DEBUG
				userlog("JPNHG3_PYMT_ENQ L1  : enq_processing() failed while select ccenter from APPLICATION");
			#endif
			strcpy(prog_log.remarks,"enq_processing() failed while select ccenter from APPLICATION");
			sprintf(excep_log.error_msg,"enq_processing() failed while select ccenter from APPLICATION:%s ",sqlmsg);
			excep_log.termination_flag = 'Y';
			excep_log.severity = FATAL;
			log_error(ctx);

			return SELECT_ERROR;
		}

		#ifdef DEBUG				
			userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : after select from APPLICATION collcenter: %s",ccenter.arr);		
		#endif

		strcpy(resp->collcenter,(char*)ccenter.arr);

		citycode = 0; name.arr[0] = '\0'; address1.arr[0] = '\0';
		EXEC SQL SELECT GMPCSHORTNAME1||' '||GMPCSHORTNAME2||' '||GMPCSHORTNAME3,
			ADDRESS1, ADDRESS2, ADDRESS3,POSTCODE,STATECODE,CITYCODE INTO
			:name, :address1, :address2, :address3, :postcode, :statecode, :citycode
				FROM APPNT_JPN_INFO
				WHERE APPLID = :applid;

		name.arr[name.len] = '\0';
		address1.arr[address1.len] = '\0';
		address2.arr[address2.len] = '\0';
		address3.arr[address3.len] = '\0';
		postcode.arr[postcode.len] = '\0';
		statecode.arr[statecode.len] = '\0';

		sqlmsg[0] = '\0';
		strcpy(sqlmsg, SQLMSG);
		if(sqlca.sqlcode != 0)
		{
			#ifdef DEBUG
				userlog("JPNHG3_PYMT_ENQ L1  : enq_processing() failed while select name from APPNT_JPN_INFO");
			#endif
			strcpy(prog_log.remarks,"enq_processing() failed while select name from APPNT_JPN_INFO");
			sprintf(excep_log.error_msg,"enq_processing() failed while select name from APPNT_JPN_INFO:%s ",sqlmsg);
			excep_log.termination_flag = 'Y';
			excep_log.severity = FATAL;
			log_error(ctx);

			return SELECT_ERROR;
		}
		
		#ifdef DEBUG				
			userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : after select from APPNT_JPN_INFO name: %s",name.arr);
			userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : after select from APPNT_JPN_INFO address1: %s",address1.arr);	
			userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : after select from APPNT_JPN_INFO address2: %s",address2.arr);
			userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : after select from APPNT_JPN_INFO address3: %s",address3.arr);
			userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : after select from APPNT_JPN_INFO postcode: %s",postcode.arr);
			userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : after select from APPNT_JPN_INFO statecode: %s",statecode.arr);
			userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : after select from APPNT_JPN_INFO citycode: %d",citycode);
		#endif

		if(name.arr[0] != '\0')
		{

			// copy these values into response buffer
			strcpy(resp->name,(char*)name.arr);
			strcpy(resp->address1,(char*)address1.arr);
			strcpy(resp->address2,(char*)address2.arr);
			strcpy(resp->address3,(char*)address3.arr);
			strcpy(resp->postcode,(char*)postcode.arr);
			strcpy(resp->statecode,(char*)statecode.arr);
			resp->citycode = citycode;

			ret_code = 0;
			return ret_code;
		}
		else
		{
			ret_code = 70001;
			return ret_code;
		}


	}
	

	return SUCCESS;
}


/*************************************************************************/
/* Function Name:usk_processing								             */
/* Description  :Updates the address info to the tables based on applid  */	
/* Input        :ADDRESS_INFO_T structure					             */   
/* Return Values:SUCCESS, SELECT_ERROR or UPDATE_ERROR       	         */
/*************************************************************************/
int usk_processing(JPNHG3_PYMT_ENQ_REQ_T *req, JPNHG3_USK_ENQ_RESP_T *usk_resp, void * ctx)
{
	struct sqlca sqlca = {0}; // added on 13/03/06
	EXEC SQL BEGIN DECLARE SECTION;
	
	varchar applid[APP_ID_SIZE] = {0};
	varchar kptno[KPT_SIZE] = {0};	
	int usk_count = 0;
	//samsuri todo: add data for new table USK_COMPOUND_FEE -updated 16 feb 2023
	struct
	{
		varchar hv_uskApplid[APP_ID_SIZE];
		varchar hv_uskOldApplid[APP_ID_SIZE];
		int     hv_txnSerNo;
		varchar hv_idType[ID_TYPE_SIZE]; //3
		varchar hv_idNo[ID_NUMBER2_SIZE]; //13
		varchar hv_gmpcName [151];
		int     hv_cardLostCount;	
		varchar hv_lostReasonCode[3];
		float   hv_CF;
		varchar hv_appealDate[DATE_TIME_SIZE + 4];
		varchar hv_appealBranch[BRANCH_CODE_SIZE]; //7
		varchar hv_appealUserID[USER_ID_SIZE]; //9
		varchar hv_appealRemark[251];
		float   hv_appealPercent;
		float   hv_amtToPay;
		varchar hv_appealStatus[26];
		varchar hv_sscBranch[BRANCH_CODE_SIZE]; 
		varchar hv_sscUserID[USER_ID_SIZE]; 
		varchar hv_sscWsID[4]; 
		varchar hv_sscDateTime[DATE_TIME_SIZE + 4];
		varchar hv_sscRemark[251];
		varchar hv_payReceipt[RECEIPT_SIZE];
		varchar hv_payBranch[BRANCH_CODE_SIZE]; 
		varchar hv_payUserID[USER_ID_SIZE]; 
		varchar hv_payDateTime[DATE_TIME_SIZE + 4];
	} usk_details_structure;

	struct
	{
		short hv_uskApplid_ind;
		short hv_uskOldApplid_ind;
		short hv_txnSerNo_ind;
		short hv_idType_ind;
		short hv_idNo_ind;
		short hv_gmpcName_ind;
		short hv_cardLostCount_ind;	
		short hv_lostReasonCode_ind;
		short hv_CF_ind;
		short hv_appealDate_ind;
		short hv_appealBranch_ind;
		short hv_appealUserID_ind;
		short hv_appealRemark_ind;
		short hv_appealPercent_ind;
		short hv_amtToPay_ind;
		short hv_appealStatus_ind;
		short hv_sscBranch_ind; 
		short hv_sscUserID_ind; 
		short hv_sscWsID_ind; 
		short hv_sscDateTime_ind;
		short hv_sscRemark_ind;
		short hv_payReceipt_ind;
		short hv_payBranch_ind; 
		short hv_payUserID_ind; 
		short hv_payDateTime_ind;
	} usk_details_structure_ind;
	

	int   ret_code=0;

	sql_context pcCtx; 
	EXEC SQL END DECLARE SECTION;


	pcCtx = ctx; 
	EXEC SQL CONTEXT USE :pcCtx;


	// copy the kptno from req buffer to local variable here
	strcpy((char*)kptno.arr,req->kptno);
	setlen(kptno);

	#ifdef DEBUG
		userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : req->kptno: %s",req->kptno);
		userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : kptno: %s",kptno.arr);
	#endif


	applid.arr[0] = '\0';
	EXEC SQL SELECT MAX(APPLID) INTO :applid FROM APPLICATION 
		WHERE KPTNO = :kptno 
			AND APPLSTAT IN ('X','Q','A','9','D'); //samsuri added ,'A','9','D'

	applid.arr[applid.len] = '\0';	

	sqlmsg[0] = '\0';
	strcpy(sqlmsg, SQLMSG);
	if(sqlca.sqlcode != 0)
	{
		#ifdef DEBUG
			userlog("JPNHG3_PYMT_ENQ L1  : enq_processing() failed while select max(applid) from APPLICATION");
		#endif
		strcpy(prog_log.remarks,"enq_processing() failed while select max(applid) from APPLICATION");
		sprintf(excep_log.error_msg,"enq_processing() failed while select max(applid) from APPLICATION:%s ",sqlmsg);
		excep_log.termination_flag = 'Y';
		excep_log.severity = FATAL;
		log_error(ctx);

		return SELECT_ERROR;
	}

	#ifdef DEBUG
		userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : max applid after select: %s",applid.arr);		
	#endif


	if(applid.arr[0] == '\0')
	{
		#ifdef DEBUG
			userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : No record found for HG3 payment");		
		#endif

		ret_code = 70001;
		return ret_code;  // no record found for HG3 payment	

	}
	else
	{
		


			//added by samsuri on 20 feb 2023
		EXEC SQL 
			SELECT COUNT(APPLID) INTO :usk_count 
			FROM USK_COMPOUND_FEE 
			WHERE OLDAPPLID = :applid;


		userlog("JPNHG3_PYMT_ENQ L1 : get_usk_count (prob_count): %d",usk_count);

		


		if(usk_count > 0)
		{

			//samsuri todo: add sql query foe table USK. and then copy to resp->		
			EXEC SQL DECLARE usk_details_cur CURSOR FOR 			
			SELECT 
			APPLID       ,
			OLDAPPLID    ,
			TXNSERNO     ,
			IDTYPE       ,
			IDNO         ,
			GMPCNAME     ,
			CARDLOSTCNT  ,
			LOSTRSNCODE  ,
			CF           ,
			TO_CHAR(APPEALDATE,'DDMMYYYY HH24MISS')   ,
			APPEALBRANCH ,
			APPEALUSERID ,
			APPEALREMARK ,
			APPEALPERCENT,
			AMTTOPAY     ,
			APPEALSTATUS ,
			SSCBRANCH    ,
			SSCUSERID    ,
			SSCWSID      ,
			TO_CHAR(SSCDATETIME,'DDMMYYYY HH24MISS')  ,
			SSCREMARK    ,
			PAYRECEIPT   ,
			PAYBRANCH    ,
			PAYUSERID    ,
			TO_CHAR(PAYDATETIME  ,'DDMMYYYY HH24MISS')  
			
			FROM USK_COMPOUND_FEE
			WHERE OLDAPPLID = :applid;

			EXEC SQL OPEN usk_details_cur;

			userlog("JPNHG3_PYMT_ENQ L1  : enq_processing() USK_COMPOUND_FEE SQLMSG: %s SQLCODE: %d", SQLMSG,SQLCODE);

			sqlmsg[0] = '\0';
			strcpy(sqlmsg, SQLMSG);
			if(sqlca.sqlcode != 0)
			{
				userlog("JPNHG3_PYMT_ENQ L1  : enq_processing() failed while select from USK_COMPOUND_FEE");

				strcpy(prog_log.remarks,"get_prob_record_recs : Error in opening the cursor USK_COMPOUND_FEE");
				sprintf(excep_log.error_msg,"get_prob_record_recs : Error in opening the cursor USK_COMPOUND_FEE : %s", SQLMSG);
				excep_log.termination_flag = 'Y';
				excep_log.severity = FATAL;

				log_error(ctx);

				return CURSOR_OPEN_ERROR;						
			}


			while(1)
			{
				userlog("JPNHG3_PYMT_ENQ L1  : enq_processing() in USK while loop");
				memset(&usk_details_structure,'\0',sizeof(usk_details_structure));

				EXEC SQL FETCH usk_details_cur 
						INTO :usk_details_structure INDICATOR :usk_details_structure_ind;
				
				if(NO_DATA_FOUND) break;

				if (SQLCODE)
				{
				#ifdef DEBUG
					userlog(" get_prob_record_recs : Error in fetching the cursor prob_details : %s", SQLMSG);
				#endif
					/* Log the error */
					strcpy(prog_log.remarks,"get_prob_record_recs : Error in fetching the cursor USK_COMPOUND_FEE");
					sprintf(excep_log.error_msg,"get_prob_record_recs : Error in fetching the cursor USK_COMPOUND_FEE : %s", SQLMSG);
					excep_log.termination_flag = 'Y';
					excep_log.severity = FATAL;

					log_error(ctx);

					EXEC SQL CLOSE usk_details_cur;

					return CURSOR_FETCH_ERROR;
				}

				setnull(usk_details_structure.hv_uskApplid);
				setnull(usk_details_structure.hv_uskOldApplid);
				setnull(usk_details_structure.hv_gmpcName);
				setnull(usk_details_structure.hv_lostReasonCode);
				setnull(usk_details_structure.hv_appealDate);
				setnull(usk_details_structure.hv_appealBranch);
				setnull(usk_details_structure.hv_appealUserID);
				setnull(usk_details_structure.hv_appealRemark);
				setnull(usk_details_structure.hv_appealStatus);
				setnull(usk_details_structure.hv_sscBranch);
				setnull(usk_details_structure.hv_sscUserID);
				setnull(usk_details_structure.hv_sscWsID);
				setnull(usk_details_structure.hv_sscDateTime);
				setnull(usk_details_structure.hv_sscRemark);
				setnull(usk_details_structure.hv_payReceipt);
				setnull(usk_details_structure.hv_payBranch);
				setnull(usk_details_structure.hv_payUserID);
				setnull(usk_details_structure.hv_payDateTime);

				userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : hv_uskApplid: %s",usk_details_structure.hv_uskApplid.arr);
				userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : hv_uskOldApplid: %s",usk_details_structure.hv_uskOldApplid.arr);
				userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : hv_txnSerNo: %d",usk_details_structure.hv_txnSerNo);
				userlog("JPNHG3_PYMT_ENQ L1 (enq_processing) : hv_gmpcName: %s",usk_details_structure.hv_gmpcName.arr);

				if(usk_details_structure.hv_uskApplid.arr[0] != '\0')
				{
					userlog("JPNHG3_PYMT_ENQ L1  : enq_processing() in usk_details_structure to usk_resp");
					// if(local_prob_details_ind.prob_no_ind != -1)
					// 	prob_details->prob_no = local_prob_details.prob_no;

					strcpy(usk_resp->uskApplid,(char*)usk_details_structure.hv_uskApplid.arr);
					strcpy(usk_resp->uskOldApplid,(char*)usk_details_structure.hv_uskOldApplid.arr);
					usk_resp->txnSerNo = usk_details_structure.hv_txnSerNo;

					strcpy(usk_resp->idType,(char*)usk_details_structure.hv_idType.arr);
					strcpy(usk_resp->idNo,(char*)usk_details_structure.hv_idNo.arr);
					strcpy(usk_resp->gmpcName,(char*)usk_details_structure.hv_gmpcName.arr);
					usk_resp->cardLostCount = usk_details_structure.hv_cardLostCount;
					strcpy(usk_resp->lostReasonCode,(char*)usk_details_structure.hv_lostReasonCode.arr);
					usk_resp->CF = usk_details_structure.hv_CF;
					strcpy(usk_resp->appealDate,(char*)usk_details_structure.hv_appealDate.arr);
					strcpy(usk_resp->appealBranch,(char*)usk_details_structure.hv_appealBranch.arr);
					strcpy(usk_resp->appealUserID,(char*)usk_details_structure.hv_appealUserID.arr);
					strcpy(usk_resp->appealRemark,(char*)usk_details_structure.hv_appealRemark.arr);
					usk_resp->appealPercent = usk_details_structure.hv_appealPercent;
					usk_resp->amtToPay = usk_details_structure.hv_amtToPay;
					strcpy(usk_resp->appealStatus,(char*)usk_details_structure.hv_appealStatus.arr);
					strcpy(usk_resp->sscBranch,(char*)usk_details_structure.hv_sscBranch.arr);
					strcpy(usk_resp->sscUserID,(char*)usk_details_structure.hv_sscUserID.arr);
					strcpy(usk_resp->sscWsID,(char*)usk_details_structure.hv_sscWsID.arr);
					strcpy(usk_resp->sscDateTime,(char*)usk_details_structure.hv_sscDateTime.arr);
					strcpy(usk_resp->sscRemark,(char*)usk_details_structure.hv_sscRemark.arr);
					strcpy(usk_resp->payReceipt,(char*)usk_details_structure.hv_payReceipt.arr);
					strcpy(usk_resp->payBranch,(char*)usk_details_structure.hv_payBranch.arr);
					strcpy(usk_resp->payUserID,(char*)usk_details_structure.hv_payUserID.arr);
					strcpy(usk_resp->payDateTime,(char*)usk_details_structure.hv_payDateTime.arr);
					
				}
				
				usk_resp++;
			}
			
			EXEC SQL CLOSE usk_details_cur;

			userlog("JPNHG3_PYMT_ENQ L1  : enq_processing() usk_details_cur closed");					
		}


		ret_code = 0;
		return ret_code;

	}
	
	return SUCCESS;
}
